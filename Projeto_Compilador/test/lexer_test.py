import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.lexer import lexer
from tests_db import tests

expected_tokens = []

#0
expected_tokens.append([
    ('PROGRAM', 'program'),
    ('ID', 'Example'),
    ('SEMICOLON', ';'),
    ('VAR', 'var'),
    ('ID', 'x'),
    ('COMMA', ','),
    ('ID', 'y'),
    ('COLON', ':'),
    ('INTEGER_TYPE', 'integer'),
    ('SEMICOLON', ';'),
    ('ID', 'z'),
    ('COLON', ':'),
    ('REAL_TYPE', 'real'),
    ('SEMICOLON', ';'),
    ('ID', 's'),
    ('COLON', ':'),
    ('STRING_TYPE', 'string'),
    ('SEMICOLON', ';'),
    ('BEGIN', 'begin'),
    ('ID', 'x'),
    ('BECOMES', ':='),
    ('INTEGER', 10),
    ('SEMICOLON', ';'),
    ('ID', 'y'),
    ('BECOMES', ':='),
    ('INTEGER', 20),
    ('SEMICOLON', ';'),
    ('ID', 'z'),
    ('BECOMES', ':='),
    ('REAL', 3.14),
    ('SEMICOLON', ';'),
    ('ID', 's'),
    ('BECOMES', ':='),
    ('STRING', 'Hello,    world!'),
    ('SEMICOLON', ';'),
    ('IF', 'if'),
    ('LPAREN', '('),
    ('ID', 'x'),
    ('LT', '<'),
    ('ID', 'y'),
    ('RPAREN', ')'),
    ('AND', 'and'),
    ('LPAREN', '('),
    ('ID', 'z'),
    ('GT', '>'),
    ('REAL', 3.0),
    ('RPAREN', ')'),
    ('THEN', 'then'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('STRING', 'x is less than y and z is greater than 3.0'),
    ('RPAREN', ')'),
    ('ELSE', 'else'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('STRING', 'Condition not met'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('FOR', 'for'),
    ('ID', 'x'),
    ('BECOMES', ':='),
    ('INTEGER', 1),
    ('TO', 'to'),
    ('INTEGER', 10),
    ('DO', 'do'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('ID', 'x'),
    ('RPAREN', ')'),
    ('END', 'end'),
    ('DOT', '.')
])

#1
expected_tokens.append([
    ('PROGRAM', 'program'),
    ('ID', 'HelloWorld'),
    ('SEMICOLON', ';'),
    ('BEGIN', 'begin'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('STRING', 'Ola, Mundo!'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('END', 'end'),
    ('DOT', '.')
])

#2
expected_tokens.append([
    ('PROGRAM', 'program'),
    ('ID', 'Maior3'),
    ('SEMICOLON', ';'),
    ('VAR', 'var'),
    ('ID', 'num1'),
    ('COMMA', ','),
    ('ID', 'num2'),
    ('COMMA', ','),
    ('ID', 'num3'),
    ('COMMA', ','),
    ('ID', 'maior'),
    ('COLON', ':'),
    ('INTEGER_TYPE', 'integer'),
    ('SEMICOLON', ';'),
    ('BEGIN', 'begin'),
    ('ID', 'Write'),
    ('LPAREN', '('),
    ('STRING', 'Introduza o primeiro número: '),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'ReadLn'),
    ('LPAREN', '('),
    ('ID', 'num1'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'Write'),
    ('LPAREN', '('),
    ('STRING', 'Introduza o segundo número: '),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'ReadLn'),
    ('LPAREN', '('),
    ('ID', 'num2'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'Write'),
    ('LPAREN', '('),
    ('STRING', 'Introduza o terceiro número: '),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'ReadLn'),
    ('LPAREN', '('),
    ('ID', 'num3'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('IF', 'if'),
    ('ID', 'num1'),
    ('GT', '>'),
    ('ID', 'num2'),
    ('THEN', 'then'),
    ('IF', 'if'),
    ('ID', 'num1'),
    ('GT', '>'),
    ('ID', 'num3'),
    ('THEN', 'then'),
    ('ID', 'maior'),
    ('BECOMES', ':='),
    ('ID', 'num1'),
    ('ELSE', 'else'),
    ('ID', 'maior'),
    ('BECOMES', ':='),
    ('ID', 'num3'),
    ('ELSE', 'else'),
    ('IF', 'if'),
    ('ID', 'num2'),
    ('GT', '>'),
    ('ID', 'num3'),
    ('THEN', 'then'),
    ('ID', 'maior'),
    ('BECOMES', ':='),
    ('ID', 'num2'),
    ('ELSE', 'else'),
    ('ID', 'maior'),
    ('BECOMES', ':='),
    ('ID', 'num3'),
    ('SEMICOLON', ';'),
    ('ID', 'WriteLn'),
    ('LPAREN', '('),
    ('STRING', 'O maior é: '),
    ('COMMA', ','),
    ('ID', 'maior'),
    ('RPAREN', ')'),
    ('END', 'end'),
    ('DOT', '.')
])

#3
expected_tokens.append([
    ('PROGRAM', 'program'),
    ('ID', 'Fatorial'),
    ('SEMICOLON', ';'),
    ('VAR', 'var'),
    ('ID', 'n'),
    ('COMMA', ','),
    ('ID', 'i'),
    ('COMMA', ','),
    ('ID', 'fat'),
    ('COLON', ':'),
    ('INTEGER_TYPE', 'integer'),
    ('SEMICOLON', ';'),
    ('BEGIN', 'begin'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('STRING', 'Introduza um número inteiro positivo:'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'readln'),
    ('LPAREN', '('),
    ('ID', 'n'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'fat'),
    ('BECOMES', ':='),
    ('INTEGER', 1),
    ('SEMICOLON', ';'),
    ('FOR', 'for'),
    ('ID', 'i'),
    ('BECOMES', ':='),
    ('INTEGER', 1),
    ('TO', 'to'),
    ('ID', 'n'),
    ('DO', 'do'),
    ('ID', 'fat'),
    ('BECOMES', ':='),
    ('ID', 'fat'),
    ('ASTERISK', '*'),
    ('ID', 'i'),
    ('SEMICOLON', ';'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('STRING', 'Fatorial de '),
    ('COMMA', ','),
    ('ID', 'n'),
    ('COMMA', ','),
    ('STRING', ': '),
    ('COMMA', ','),
    ('ID', 'fat'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('END', 'end'),
    ('DOT', '.')
])

#4
expected_tokens.append([
    ('PROGRAM', 'program'),
    ('ID', 'NumeroPrimo'),
    ('SEMICOLON', ';'),
    ('VAR', 'var'),
    ('ID', 'num'),
    ('COMMA', ','),
    ('ID', 'i'),
    ('COLON', ':'),
    ('INTEGER_TYPE', 'integer'),
    ('SEMICOLON', ';'),
    ('ID', 'primo'),
    ('COLON', ':'),
    ('BOOLEAN_TYPE', 'boolean'),
    ('SEMICOLON', ';'),
    ('BEGIN', 'begin'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('STRING', 'Introduza um número inteiro positivo:'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'readln'),
    ('LPAREN', '('),
    ('ID', 'num'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'primo'),
    ('BECOMES', ':='),
    ('TRUE', True),
    ('SEMICOLON', ';'),
    ('ID', 'i'),
    ('BECOMES', ':='),
    ('INTEGER', 2),
    ('SEMICOLON', ';'),
    ('WHILE', 'while'),
    ('LPAREN', '('),
    ('ID', 'i'),
    ('LE', '<='),
    ('LPAREN', '('),
    ('ID', 'num'),
    ('DIV', 'div'),
    ('INTEGER', 2),
    ('RPAREN', ')'),
    ('RPAREN', ')'),
    ('AND', 'and'),
    ('ID', 'primo'),
    ('DO', 'do'),
    ('BEGIN', 'begin'),
    ('IF', 'if'),
    ('LPAREN', '('),
    ('ID', 'num'),
    ('MOD', 'mod'),
    ('ID', 'i'),
    ('RPAREN', ')'),
    ('EQ', '='),
    ('INTEGER', 0),
    ('THEN', 'then'),
    ('ID', 'primo'),
    ('BECOMES', ':='),
    ('FALSE', False),
    ('SEMICOLON', ';'),
    ('ID', 'i'),
    ('BECOMES', ':='),
    ('ID', 'i'),
    ('PLUS', '+'),
    ('INTEGER', 1),
    ('SEMICOLON', ';'),
    ('END', 'end'),
    ('SEMICOLON', ';'),
    ('IF', 'if'),
    ('ID', 'primo'),
    ('THEN', 'then'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('ID', 'num'),
    ('COMMA', ','),
    ('STRING', ' é um número primo'),
    ('RPAREN', ')'),
    ('ELSE', 'else'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('ID', 'num'),
    ('COMMA', ','),
    ('STRING', ' não é um número primo'),
    ('RPAREN', ')'),
    ('END', 'end'),
    ('DOT', '.')
])

#5
expected_tokens.append([
    ('PROGRAM', 'program'),
    ('ID', 'SomaArray'),
    ('SEMICOLON', ';'),
    ('VAR', 'var'),
    ('ID', 'numeros'),
    ('COLON', ':'),
    ('ARRAY', 'array'),
    ('LBRAC', '['),
    ('INTEGER', 1),
    ('DOTDOT', '..'),
    ('INTEGER', 5),
    ('RBRAC', ']'),
    ('OF', 'of'),
    ('INTEGER_TYPE', 'integer'),
    ('SEMICOLON', ';'),
    ('ID', 'i'),
    ('COMMA', ','),
    ('ID', 'soma'),
    ('COLON', ':'),
    ('INTEGER_TYPE', 'integer'),
    ('SEMICOLON', ';'),
    ('BEGIN', 'begin'),
    ('ID', 'soma'),
    ('BECOMES', ':='),
    ('INTEGER', 0),
    ('SEMICOLON', ';'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('STRING', 'Introduza 5 números inteiros:'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('FOR', 'for'),
    ('ID', 'i'),
    ('BECOMES', ':='),
    ('INTEGER', 1),
    ('TO', 'to'),
    ('INTEGER', 5),
    ('DO', 'do'),
    ('BEGIN', 'begin'),
    ('ID', 'readln'),
    ('LPAREN', '('),
    ('ID', 'numeros'),
    ('LBRAC', '['),
    ('ID', 'i'),
    ('RBRAC', ']'), 
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'soma'),
    ('BECOMES', ':='),
    ('ID', 'soma'),
    ('PLUS','+'),
    ('ID','numeros'),
    ('LBRAC','['),
    ('ID','i'),
    ('RBRAC',']'),
    ('SEMICOLON',';'),
    ('END','end'),
    ('SEMICOLON',';'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('STRING', 'A soma dos números é: '),
    ('COMMA', ','),
    ('ID', 'soma'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('END', 'end'),
    ('DOT', '.')
])

#6
expected_tokens.append([
    ('PROGRAM', 'program'),
    ('ID', 'BinarioParaInteiro'),
    ('SEMICOLON', ';'),
    ('VAR', 'var'),
    ('ID', 'bin'),
    ('COLON', ':'),
    ('STRING_TYPE', 'string'),
    ('SEMICOLON', ';'),
    ('ID', 'i'),
    ('COMMA', ','),
    ('ID', 'valor'),
    ('COMMA', ','),
    ('ID', 'potencia'),
    ('COLON', ':'),
    ('INTEGER_TYPE', 'integer'),
    ('SEMICOLON', ';'),
    ('BEGIN', 'begin'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('STRING', 'Introduza uma string binária:'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'readln'),
    ('LPAREN', '('),
    ('ID', 'bin'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'valor'),
    ('BECOMES', ':='),
    ('INTEGER', 0),
    ('SEMICOLON', ';'),
    ('ID', 'potencia'),
    ('BECOMES', ':='),
    ('INTEGER', 1),
    ('SEMICOLON', ';'),
    ('FOR','for'),
    ('ID','i'),
    ('BECOMES', ':='),
    ('ID','length'),
    ('LPAREN','('),
    ('ID','bin'),
    ('RPAREN',')'),
    ('DOWNTO','downto'),
    ('INTEGER',1),
    ('DO','do'),
    ('BEGIN','begin'),
    ('IF','if'),
    ('ID','bin'),
    ('LBRAC','['),
    ('ID','i'),
    ('RBRAC',']'),
    ('EQ','='),
    ('STRING','1'),
    ('THEN','then'),
    ('ID','valor'),
    ('BECOMES',':='),
    ('ID','valor'),
    ('PLUS','+'),
    ('ID','potencia'),
    ('SEMICOLON',';'),
    ('ID','potencia'),
    ('BECOMES',':='),
    ('ID','potencia'),
    ('ASTERISK','*'),
    ('INTEGER',2),
    ('SEMICOLON',';'),
    ('END','end'),
    ('SEMICOLON',';'),
    ('ID','writeln'),
    ('LPAREN','('),
    ('STRING','O valor inteiro correspondente é: '),
    ('COMMA',','),
    ('ID','valor'),
    ('RPAREN',')'),
    ('SEMICOLON',';'),
    ('END','end'),
    ('DOT','.')
])

#7
expected_tokens.append([
    ('PROGRAM', 'program'),
    ('ID', 'BinarioParaInteiro'),
    ('SEMICOLON', ';'),
    ('FUNCTION', 'function'),
    ('ID', 'BinToInt'),
    ('LPAREN', '('),
    ('ID', 'bin'),
    ('COLON', ':'),
    ('STRING_TYPE', 'string'),
    ('RPAREN', ')'),
    ('COLON', ':'),
    ('INTEGER_TYPE', 'integer'),
    ('SEMICOLON', ';'),
    ('VAR', 'var'),
    ('ID', 'i'),
    ('COMMA', ','),
    ('ID', 'valor'),
    ('COMMA', ','),
    ('ID', 'potencia'),
    ('COLON', ':'),
    ('INTEGER_TYPE', 'integer'),
    ('SEMICOLON', ';'),
    ('BEGIN', 'begin'),
    ('ID', 'valor'),
    ('BECOMES', ':='),
    ('INTEGER', 0),
    ('SEMICOLON', ';'),
    ('ID', 'potencia'),
    ('BECOMES', ':='),
    ('INTEGER', 1),
    ('SEMICOLON', ';'),
    ('FOR', 'for'),
    ('ID', 'i'),
    ('BECOMES', ':='),
    ('ID', 'length'),
    ('LPAREN', '('),
    ('ID', 'bin'),
    ('RPAREN', ')'),
    ('DOWNTO', 'downto'),
    ('INTEGER', 1),
    ('DO', 'do'),
    ('BEGIN', 'begin'),
    ('IF', 'if'),
    ('ID', 'bin'),
    ('LBRAC', '['),
    ('ID', 'i'),
    ('RBRAC', ']'),
    ('EQ', '='),
    ('STRING', '1'),
    ('THEN', 'then'),
    ('ID', 'valor'),
    ('BECOMES', ':='),
    ('ID', 'valor'),
    ('PLUS','+'),
    ('ID','potencia'),
    ('SEMICOLON',';'),
    ('ID','potencia'),
    ('BECOMES',':='),
    ('ID','potencia'),
    ('ASTERISK','*'),
    ('INTEGER',2),
    ('SEMICOLON',';'),
    ('END','end'),
    ('SEMICOLON',';'),
    ('ID','BinToInt'), 
    ('BECOMES', ':='),
    ('ID','valor'), 
    ('SEMICOLON',';'), 
    ('END','end'),
    ('SEMICOLON',';'),
    ('VAR', 'var'),
    ('ID', 'bin'),
    ('COLON', ':'),
    ('STRING_TYPE', 'string'),
    ('SEMICOLON', ';'),
    ('ID', 'valor'),
    ('COLON', ':'),
    ('INTEGER_TYPE', 'integer'),
    ('SEMICOLON', ';'),
    ('BEGIN', 'begin'),
    ('ID', 'writeln'),
    ('LPAREN', '('),
    ('STRING', 'Introduza uma string binária:'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'readln'),
    ('LPAREN', '('),
    ('ID', 'bin'),
    ('RPAREN', ')'),
    ('SEMICOLON', ';'),
    ('ID', 'valor'),
    ('BECOMES', ':='),
    ('ID', 'BinToInt'), 
    ('LPAREN','('),
    ('ID','bin'), 
    ('RPAREN',')'), 
    ('SEMICOLON',';'), 
    ('ID','writeln'), 
    ('LPAREN','('), 
    ('STRING','O valor inteiro correspondente é: '), 
    ('COMMA',','), 
    ('ID','valor'), 
    ('RPAREN',')'), 
    ('SEMICOLON',';'), 
    ('END','end'),
    ('DOT','.')
])

if __name__ == "__main__":
    error = False
    error2 = False
    for index, test in enumerate(tests):
        if index >= len(expected_tokens):
            break

        lexer.input(test)
        result = []
        for tok in lexer:
            result.append((tok.type, tok.value))
    

        if len(result) != len(expected_tokens[index]):
            print(f"Test {index} failed: Expected {len(expected_tokens[index])} tokens, got {len(result)}")
            error = True
            error2 = True

        for i in range(len(result)):
            if result[i] != expected_tokens[index][i]:
                print(f"Test {index} failed: Expected token {expected_tokens[index][i]}, got {result[i]}")
                error = True
                if error2:
                    break
    
    if not error:
        print("All tests passed!")